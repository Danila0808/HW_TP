package Editor;

import Entities.Hero;
import Entities.PerkType;
import Entities.Unit;
import FileWorker.FileSystem;
import Game.Game;
import Game.Console;
import Game.Launcher;
import Game.GameExitException;

import java.io.IOException;
import java.util.List;
import java.util.Objects;
import java.util.Scanner;

public class EditorMenu {
    private static Scanner scanner;
    private static Editor editor;

    public static void Menu() throws IOException {
        String temp = "1) –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É\r\n2) –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é\r\n3) –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É\r\n4) –ò–≥—Ä–∞—Ç—å\r\n5) –ù–∞–∑–∞–¥\r\n";
        System.out.println(temp);
        scanner = new Scanner(System.in);
        System.out.print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ [1;5]: ");
        String choice = scanner.nextLine();

        space();
        switch (choice){
            case "1":
                load();
                break;
            case "2":
                create();
                break;
            case "3":
                delete();
                break;
            case "4":
                start();
                break;
            case "5":
                return;
            default:
                System.out.println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
                Menu();
                break;
        }
    }

    private static void start() throws IOException {
        List<String> paths = FileSystem.loadMaps();
        FileSystem.printNames(paths);
        System.out.println((paths.size()+1)+") –ù–∞–∑–∞–¥");
        String c = scanner.nextLine();
        if(Objects.equals(c, (paths.size()+1) + "")){
            space();
            Menu();
        }else{
            int ind=0;
            try {
                ind = Integer.parseInt(c);
            }catch (NumberFormatException e){
                System.out.println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
                space();
                Menu();
            }
            if(ind<1 || ind>paths.size()){
                System.out.println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
                space();
                Menu();
            }
            space();

            Game game = new Game(paths.get(ind-1));
            try {
                game.start();
            } catch (GameExitException _){ System.exit(0); }
        }
    }

    private static void load() throws IOException {
        List<String> paths = FileSystem.loadMaps();
        FileSystem.printNames(paths);
        System.out.println((paths.size()+1)+") –ù–∞–∑–∞–¥");
        String c = scanner.nextLine();
        if(Objects.equals(c, (paths.size()+1) + "")){
            space();
            Menu();
        }else{
            int ind=0;
            try {
                ind = Integer.parseInt(c);
            }catch (NumberFormatException e){
                System.out.println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
                space();
                Menu();
            }
            if(ind<1 || ind>paths.size()){
                System.out.println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
                space();
                Menu();
            }
            space();

            editor = new Editor(paths.get(ind-1));
            edit();
        }
    }

    private static void create() throws IOException {
        editor = new Editor();
        edit();
    }

    private static void delete() throws IOException {
        List<String> paths = FileSystem.loadMaps();
        FileSystem.printNames(paths);
        System.out.println((paths.size()+1)+") –ù–∞–∑–∞–¥");
        String c = scanner.nextLine();
        if(Objects.equals(c, (paths.size()+1) + "")){
            space();
            Menu();
        }else{
            int ind=0;
            try {
                ind = Integer.parseInt(c);
            }catch (NumberFormatException e){
                System.out.println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
                space();
                Menu();
            }
            if(ind<1 || ind>paths.size()){
                System.out.println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
                space();
                Menu();
            }
            space();

            if(FileSystem.delete(paths.get(ind-1)))
                System.out.println("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
            else
                System.out.println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è...");
            space();
            Menu();
        }
    }

    private static void edit() throws IOException {
        while (true){
            space();
            System.out.println("üîπ –ö–∞—Ä—Ç–∞: ");
            editor.render();
            System.out.println("üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã: \r\nINSERT - –≤—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —è—á–µ–π–∫—É\r\nBALANCE - –∏–∑–º–µ–Ω–∏—Ç—å" +
                    " –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å —É –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞\r\nNEW - –¥–æ–±–∞–≤–∏—Ç—å –≥–µ—Ä–æ—è –∏–ª–∏ —é–Ω–∏—Ç–∞\r\nDELETE - —É–¥–∞–ª–∏—Ç—å –≥–µ—Ä–æ—è –∏–ª–∏ —é–Ω–∏—Ç–∞" +
                    "\r\nSAVE - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏\r\nQUIT - –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞");
            Console.PrintEvents();
            String command = scanner.nextLine().trim().toUpperCase();

            switch (command) {
                case "INSERT":
                    System.out.println("üîπ –í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: \r\n" +
                            "1) –õ–∞–Ω–¥—à–∞—Ñ—Ç\r\n" +
                            "2) –ú–∞—è–∫\r\n" +
                            "3) –°–æ–∫—Ä–æ–≤–∏—â–∞\r\n" +
                            "4) –ù–∞–∑–∞–¥");
                    command = scanner.nextLine().trim();
                    if(command.equals("4"))
                        break;
                    insert(command);
                    break;
                case "BALANCE":
                    insertBalance();
                    break;
                case "NEW":
                    insertNew();
                    break;
                case "DELETE":
                    deleteEntity();
                    break;
                case "SAVE":
                    System.out.print("üîπ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã: ");
                    String fileName = scanner.nextLine();
                    editor.save(Launcher.Name+"-"+fileName);
                    return;
                case "QUIT":
                    return;
                default:
                    Console.addEvent("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + command);
                    break;
            }
        }
    }

    private static int[] validator(String command, boolean flag) throws IOException {
        int[] xy = new int[2];
        String[] arr = command.split(" ");
        try{
            xy[0] = Integer.parseInt(arr[0]);
            xy[1] = Integer.parseInt(arr[1]);
        }catch(Exception e){
            Console.addEvent("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞!");
            return null;
        }
        if(xy[0] < 0 || xy[0] >= Game.MAP_SIZE || xy[1] < 0 || xy[1] >= Game.MAP_SIZE) {
            Console.addEvent("‚ùå –í—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–∞—Ä—Ç—ã!");
            return null;
        }if(flag && xy[0]==xy[1] && (xy[0] == 0 || xy[0] == Game.MAP_SIZE-1)) {
            Console.addEvent("‚ùå –ó–∞–º–æ–∫ –Ω–µ–ª—å–∑—è —Å–ª–æ–º–∞—Ç—å!");
            return null;
        }
        return xy;
    }

    private static int convert(String num){
        try {
            return Integer.parseInt(num);
        }catch (Exception e){
            Console.addEvent("‚ùå –ù–µ–¥–æ–ø—É—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!");
            return -1;
        }
    }

    private static void insert(String command) throws IOException {
        space();
        System.out.print("üîπ –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ");
        int[] result = validator(scanner.nextLine(), true);
        if(result == null)
            return;
        int x = result[0];
        int y = result[1];
        String com;
        space();

        switch (command){
            case "1":
                System.out.println("üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞: \r\n" +
                        "1) –¢—Ä–∞–≤–∞\r\n" +
                        "2) –õ–µ—Å\r\n" +
                        "3) –í–æ–¥–∞\r\n" +
                        "4) –ì–æ—Ä–∞\r\n" +
                        "5) –¢—Ä–æ–ø–∞\r\n" +
                        "6) –ù–∞–∑–∞–¥");
                System.out.print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 1-6: ");
                com = scanner.nextLine();
                if(Objects.equals(com, "6")) return;
                insertTerrain(com, x, y);
                break;
            case "2":
                editor.setLight(x, y);
                break;
            case "3":
                System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–æ–∫—Ä–æ–≤–∏—â: ");
                com = scanner.nextLine();
                int value = 0;
                try {
                    value = Integer.parseInt(com);
                }catch (Exception e){
                    Console.addEvent("‚ùå –ù–µ–¥–æ–ø—É—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!");
                    break;
                }
                editor.setTreasure(x, y, value);
                break;
            default:
                Console.addEvent("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞!");
                break;
        }
    }

    private static void insertTerrain(String command, int x, int y){
        switch (command){
            case "1":
                editor.setGrass(x, y);
                break;
            case "2":
                editor.setForest(x, y);
                break;
            case "3":
                editor.setWater(x, y);
                break;
            case "4":
                editor.setMoutain(x, y);
                break;
            case "5":
                editor.setRoad(x, y);
                break;
            default:
                Console.addEvent("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞!");
                break;
        }
    }

    private static void insertBalance(){
        space();
        System.out.println("1) –ò–≥—Ä–æ–∫: –∑–æ–ª–æ—Ç–æ - "+editor.player.getGold() + "; –¥–æ—Ö–æ–¥ - " + editor.player.getGoldIncome());
        System.out.println("2) –ö–æ–º–ø—å—é—Ç–µ—Ä: –∑–æ–ª–æ—Ç–æ - "+editor.computer.getGold() + "; –¥–æ—Ö–æ–¥ - " + editor.computer.getGoldIncome());
        System.out.println("3) –ù–∞–∑–∞–¥");
        String command = scanner.nextLine().trim();
        int value, gold, income;

        switch (command){
            case "1":
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∑–æ–ª–æ—Ç–æ: ");
                value = convert(scanner.nextLine().trim());
                if(value == -1)
                    return;
                gold = value;

                System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥: ");
                value = convert(scanner.nextLine().trim());
                if(value == -1)
                    return;
                income = value;

                editor.setBalancePlayer(gold, income);
                break;
            case "2":
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∑–æ–ª–æ—Ç–æ: ");
                value = convert(scanner.nextLine().trim());
                if(value == -1)
                    return;
                gold = value;

                System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥: ");
                value = convert(scanner.nextLine().trim());
                if(value == -1)
                    return;
                income = value;

                editor.setBalanceEnemy(gold, income);
                break;
            case "3":
                break;
            default:
                Console.addEvent("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞!");
                break;
        }
    }

    private static void insertNew() throws IOException {
        space();
        System.out.println("1) –ì–µ—Ä–æ–π\r\n2) –Æ–Ω–∏—Ç\r\n3) –ù–∞–∑–∞–¥");
        String command = scanner.nextLine().trim();
        System.out.println();
        switch (command){
            case "1":
                setHero();
                break;
            case "2":
                setUnit();
                break;
            case "3":
                break;
            default:
                Console.addEvent("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞!");
                break;
        }
    }

    private static void setHero() throws IOException {
        space();
        System.out.print("üîπ –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ");
        int[] result = validator(scanner.nextLine(), false);
        if(result == null)
            return;
        int x = result[0];
        int y = result[1];
        System.out.println();

        System.out.println("1) –ò–≥—Ä–æ–∫\r\n2) –ö–æ–º—å—é—Ç–µ—Ä");
        String command = scanner.nextLine().trim();
        switch (command){
            case "1":
                editor.setHero(x, y);
                break;
            case "2":
                editor.setEnemy(x, y);
                break;
            default:
                Console.addEvent("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞!");
                break;
        }
    }

    private static void setUnit() throws IOException {
        space();
        System.out.print("üîπ –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ");
        int[] result = validator(scanner.nextLine(), false);
        if(result == null)
            return;
        int x = result[0];
        int y = result[1];
        System.out.println();

        List<Hero> heroes = editor.getHeroes();
        int i = 1;
        for (Hero hero : heroes) {
            System.out.println(i + ") " + hero.getOwner().getName() + " X: " + hero.getX() + " Y: " + hero.getY());
            i++;
        }
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1-"+heroes.size()+": ");
        int value = convert(scanner.nextLine().trim());
        if (value==-1)
            return;
        System.out.println();

        System.out.println("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≤–æ–π–Ω–∞:\r\n" +
                "1) –ö–æ–ø–µ–π—â–∏–∫\r\n" +
                "2) –ê—Ä–±–∞–ª–µ—Ç—á–∏–∫\r\n" +
                "3) –†—ã—Ü–∞—Ä—å\r\n" +
                "4) –ö–æ–Ω–Ω–∏—Ü–∞\r\n" +
                "5) –ü–∞–ª–∞–¥–∏–Ω");
        switch (scanner.nextLine().trim()) {
            case "1":
                editor.setUnit(value - 1, x, y, PerkType.SPEARMAN);
                break;
            case "2":
                editor.setUnit(value - 1, x, y, PerkType.CROSSBOMEN);
                break;
            case "3":
                editor.setUnit(value - 1, x, y, PerkType.SWORDSMAN);
                break;
            case "4":
                editor.setUnit(value - 1, x, y, PerkType.CAVALRY);
                break;
            case "5":
                editor.setUnit(value - 1, x, y, PerkType.PALADIN);
                break;
            default:
                Console.addEvent("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞!");
                break;
        }
    }

    private static void deleteEntity(){
        space();
        System.out.println("1) –ì–µ—Ä–æ–π\r\n2) –Æ–Ω–∏—Ç\r\n3) –ù–∞–∑–∞–¥");
        String command = scanner.nextLine().trim();
        switch (command){
            case "1":
                deleteHero();
                break;
            case "2":
                deleteUnit();
                break;
            case "3":
                break;
            default:
                Console.addEvent("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞!");
                break;
        }
    }

    private static void deleteHero(){
        space();
        List<Hero> heroes = editor.getHeroes();
        if(heroes.isEmpty()){
            Console.addEvent("‚ùå –ì–µ—Ä–æ–µ–≤ –Ω–µ—Ç");
            return;
        }
        int i = 1;
        for (Hero hero : heroes) {
            System.out.println(i + ") " + hero.getOwner().getName() + " X: " + hero.getX() + " Y: " + hero.getY());
            i++;
        }
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1-"+heroes.size()+": ");
        int value = convert(scanner.nextLine().trim());
        if (value==-1)
            return;

        editor.deleteHero(value-1);
    }

    private static void deleteUnit(){
        space();
        List<Hero> heroes = editor.getHeroes();
        if(heroes.isEmpty()){
            Console.addEvent("‚ùå –ì–µ—Ä–æ–µ–≤ –Ω–µ—Ç");
            return;
        }
        int i = 1;
        for (Hero hero : heroes) {
            System.out.println(i + ") " + hero.getOwner().getName() + " X: " + hero.getX() + " Y: " + hero.getY());
            i++;
        }
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1-"+heroes.size()+": ");
        int ind = convert(scanner.nextLine().trim());
        if (ind==-1)
            return;
        System.out.println();

        if(heroes.get(ind-1).getUnits().isEmpty()){
            Console.addEvent("‚ùå –Æ–Ω–∏—Ç–æ–≤ —É –≥–µ—Ä–æ—è –Ω–µ—Ç");
            return;
        }
        i=1;
        for(Unit u : heroes.get(ind-1).getUnits()) {
            System.out.println(i + ") " + u.getType() + " X: " + u.getX() + " Y: " + u.getY());
            i++;
        }
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1-"+heroes.size()+": ");
        int value = convert(scanner.nextLine().trim());
        if (value==-1)
            return;

        editor.deleteUnit(heroes.get(ind-1), value-1);
    }

    private static void space(){
        for (int i = 0;i<20;i++)
            System.out.println();
    }
}
